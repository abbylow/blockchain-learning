{
	"compiler": {
		"version": "0.8.22+commit.4fc1097e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "subscriptionId",
						"type": "uint64"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "numOfOptions",
						"type": "uint256"
					}
				],
				"name": "ExceedOptionMaxLimit",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wheelId",
						"type": "uint256"
					}
				],
				"name": "InvalidWheelId",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "numOfOptions",
						"type": "uint256"
					}
				],
				"name": "LessThanTwoOptions",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "want",
						"type": "address"
					}
				],
				"name": "OnlyCoordinatorCanFulfill",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"name": "WheelCreated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"name": "WheelSpinned",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"name": "WheelStopped",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_NUM_OF_OPTIONS",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string[]",
						"name": "options",
						"type": "string[]"
					}
				],
				"name": "createWheel",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "creatorToWheelIds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "numOfWheels",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "requestIdToSpin",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "wheelId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "result",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "spinId",
						"type": "uint256"
					}
				],
				"name": "spinById",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "requestId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "wheelId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "result",
								"type": "uint256"
							}
						],
						"internalType": "struct VRFD20.Spin",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wheelId",
						"type": "uint256"
					}
				],
				"name": "spinWheel",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wheelId",
						"type": "uint256"
					}
				],
				"name": "spinsByWheelId",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "wheelId",
						"type": "uint256"
					}
				],
				"name": "wheelById",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "numOfOptions",
								"type": "uint256"
							},
							{
								"internalType": "string[]",
								"name": "options",
								"type": "string[]"
							}
						],
						"internalType": "struct VRFD20.Wheel",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "wheelIdToSpinIds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "wheelIdToWheel",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "id",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "numOfOptions",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "creator",
						"type": "address"
					}
				],
				"name": "wheelsCreatedBy",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "NETWORK: Sepolia",
					"params": {
						"subscriptionId": "subscription id that this consumer contract can use"
					}
				},
				"createWheel(string[])": {
					"params": {
						"options": "string[] wheel options (2 to 10 options)"
					}
				},
				"spinById(uint256)": {
					"params": {
						"spinId": "uint256"
					},
					"returns": {
						"_0": "spin "
					}
				},
				"spinWheel(uint256)": {
					"details": "Warning: if the VRF response is delayed, avoid calling requestRandomness repeatedly as that would give miners/VRF operators latitude about which VRF response arrives first.You must review your implementation details with extreme care.",
					"params": {
						"wheelId": "uint256"
					}
				},
				"spinsByWheelId(uint256)": {
					"params": {
						"wheelId": "uint256"
					},
					"returns": {
						"_0": "spin ids"
					}
				},
				"wheelById(uint256)": {
					"params": {
						"wheelId": "uint256"
					},
					"returns": {
						"_0": "wheel"
					}
				},
				"wheelsCreatedBy(address)": {
					"params": {
						"creator": "address"
					},
					"returns": {
						"_0": "house as a string"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"constructor": {
					"notice": "Constructor inherits VRFConsumerBaseV2"
				},
				"createWheel(string[])": {
					"notice": "Create wheel"
				},
				"spinById(uint256)": {
					"notice": "Get the spin by id (spin id is the vrf request id)"
				},
				"spinWheel(uint256)": {
					"notice": "Requests randomness"
				},
				"spinsByWheelId(uint256)": {
					"notice": "Get the spins by wheel id"
				},
				"wheelById(uint256)": {
					"notice": "Get the wheel by id"
				},
				"wheelsCreatedBy(address)": {
					"notice": "Get the wheel ids created by the user"
				}
			},
			"notice": "THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY. THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE. DO NOT USE THIS CODE IN PRODUCTION.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"docs.chain.link/samples/VRF/VRFD20.sol": "VRFD20"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
			"keccak256": "0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a",
			"license": "MIT",
			"urls": [
				"bzz-raw://d66b2096987616cda4611c109d9904863872ca5852d736b30f0e19e49afde35f",
				"dweb:/ipfs/Qmc6jpm3k3YuJG7U2s3FWr81Vk2rdQBhdqD9sA6b8Cr9BE"
			]
		},
		"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
			"keccak256": "0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904",
			"license": "MIT",
			"urls": [
				"bzz-raw://038eef992d813c20737fbe94e3a36e5d541d1aa736158dd2a43dd5b840b8c360",
				"dweb:/ipfs/QmZWJ25Yr1sUSAsfJRKvTMDmGkmy63hHhB495CUL1bpNz4"
			]
		},
		"docs.chain.link/samples/VRF/VRFD20.sol": {
			"keccak256": "0xfce3ea8044d9630478acce0b9dcb37168834ed00ac426fe2c5611c4671055650",
			"license": "MIT",
			"urls": [
				"bzz-raw://92bb6dcdb7e909dd9c52821c0af60a90cb01e129cfd1077423f2eb1e9dc0a66a",
				"dweb:/ipfs/QmWiTKJUsKkSoPgeNaWEmWC6Cbk5Tzq2dx5W1taA9C8g8n"
			]
		}
	},
	"version": 1
}